' The sVB version of the 3DRubicCube provided by LitDev samples

_W = 600
_H = 600
GraphicsWindow.Width = _W
GraphicsWindow.Height = _H
GraphicsWindow.Top = 0
GraphicsWindow.Title = "3D Rubic Cube"
GraphicsWindow.BackgroundColor = Colors.Gray
View = LD3DView.AddView(_W, _H, True)
LD3DView.ResetCamera(View, -5, -5, -5, 1, 1, 1, 0, 1, 0)
LD3DView.AutoControl2(10, 1)
LD3DView.AddAmbientLight(View, Colors.White)
LDNetwork.SetSSL()
Image = ImageList.LoadImage("rubic.png")
Col = {Colors.Red, Colors.Green, Colors.Blue,
   Colors.Yellow, Colors.White, Colors.Cyan}

NumBit = 0
SetX = "setX"
SetY = "setY"
SetZ = "setZ"

' Outward faces
For IFace = 1 To 6
   For I = 1 To 3
      For J = 1 To 3
         I1 = I - 2.5
         I2 = I - 1.5
         J1 = J - 2.5
         J2 = J - 1.5
         K1 = -1.5
         K2 = 1.5
         If IFace = 1 Then
            P0 = K1 + ":" + I1 + ":" + J1
            P1 = K1 + ":" + I2 + ":" + J1
            P2 = K1 + ":" + I1 + ":" + J2
            P3 = K1 + ":" + I2 + ":" + J2
            X = 1
            Y = I
            Z = J
         ElseIf IFace = 2 Then
            P0 = K2 + ":" + I1 + ":" + J2
            P1 = K2 + ":" + I2 + ":" + J2
            P2 = K2 + ":" + I1 + ":" + J1
            P3 = K2 + ":" + I2 + ":" + J1
            X = 3
            Y = I
            Z = J
         ElseIf IFace = 3 Then
            P0 = J1 + ":" + K1 + ":" + I1
            P1 = J1 + ":" + K1 + ":" + I2
            P2 = J2 + ":" + K1 + ":" + I1
            P3 = J2 + ":" + K1 + ":" + I2
            X = J
            Y = 1
            Z = I
         ElseIf IFace = 4 Then
            P0 = J2 + ":" + K2 + ":" + I1
            P1 = J2 + ":" + K2 + ":" + I2
            P2 = J1 + ":" + K2 + ":" + I1
            P3 = J1 + ":" + K2 + ":" + I2
            X = J
            Y = 3
            Z = I
         ElseIf IFace = 5 Then
            P0 = I1 + ":" + J1 + ":" + K1
            P1 = I2 + ":" + J1 + ":" + K1
            P2 = I1 + ":" + J2 + ":" + K1
            P3 = I2 + ":" + J2 + ":" + K1
            X = I
            Y = J
            Z = 1
         ElseIf IFace = 6 Then
            P0 = I1 + ":" + J2 + ":" + K2
            P1 = I2 + ":" + J2 + ":" + K2
            P2 = I1 + ":" + J1 + ":" + K2
            P3 = I2 + ":" + J1 + ":" + K2
            X = I
            Y = J
            Z = 3
         EndIf
         
         Points = P0 + " " + P1 + " " + P2 + " " + P3
         NumBit = NumBit + 1
         BitX[NumBit] = X
         BitY[NumBit] = Y
         BitZ[NumBit] = Z
         BitCol[NumBit] = Col[IFace]
         Bit[NumBit] = LD3DView.AddGeometry(
            View, Points, "0:2:1 1:2:3", "", BitCol[NumBit], "D")
         LD3DView.AddImage(
            View, Bit[NumBit], "0:0 1:0 0:1 1:1", Image, "D")
         BitPos[NumBit] = LD3DView.GetPosition(View, Bit[NumBit])
         LD3DView.SetCentre(View, Bit[NumBit], 0, 0, 0, "R1R2")
      Next
   Next
Next

' Interior colour cubes
For X = 1 To 3
   For Y = 1 To 3
      For Z = 1 To 3
         NumBit = NumBit + 1
         BitX[NumBit] = X
         BitY[NumBit] = Y
         BitZ[NumBit] = Z
         Bit[NumBit] = LD3DView.AddCube(View, 1, Colors.Black, "E")
         LD3DView.ReverseNormals(View, Bit[NumBit])
         LD3DView.TranslateGeometry(
            View, Bit[NumBit], X - 2, Y - 2, Z - 2)
         BitPos[NumBit] = LD3DView.GetPosition(View, Bit[NumBit])
         LD3DView.SetCentre(
            View, Bit[NumBit], 2 - X, 2 - Y, 2 - Z, "R2")
      Next
   Next
Next

Time = 0.2
Repeat = 1

NumTurn = 50
TurnData[0] = ""

For Turn = 1 To NumTurn
   CurTurn!Dir = Math.GetRandomNumber(3)
   CurTurn!Slice = Math.GetRandomNumber(3)
   CurTurn!Angle = 90 * (Math.GetRandomNumber(7) - 4)
   TurnData.Append(CurTurn)
Next

Reverse = False
DoTurns()
Program.Delay(1000)
Reverse = True
DoTurns()

Sub DoTurns
   For turn = 1 To NumTurn
      xVal = 0
      yVal = 0
      zVal = 0
      
      If Reverse Then
         iTurn = NumTurn + 1 - turn
         CurTurn = TurnData[iTurn]
         angle = -CurTurn!Angle
      Else
         iTurn = turn
         CurTurn = TurnData[iTurn]
         angle = CurTurn!Angle
      EndIf
      
      dir = CurTurn!Dir
      If dir = 1 Then
         xVal = CurTurn!Slice
      ElseIf dir = 2 Then
         yVal = CurTurn!Slice
      ElseIf dir = 3 Then
         zVal = CurTurn!Slice
      EndIf
      Rotate(xVal, yVal, zVal, angle)
   Next
EndSub

Sub Rotate(xVal, yVal, zVal, angle)
   LDList.Clear(SetX) ' Use a list to be fast and start all rotations at the same time as much as possible
   LDList.Clear(SetY)
   LDList.Clear(SetZ)
   
   For i = 1 To NumBit
      If BitX[i] = xVal Then
         LDList.Add(SetX, Bit[i])
      ElseIf BitY[i] = yVal Then
         LDList.Add(SetY, Bit[i])
      ElseIf BitZ[i] = zVal Then
         LDList.Add(SetZ, Bit[i])
      EndIf
   Next
   
   duration = Time * Math.Abs(angle / 90)
   For i = 1 To LDList.Count(SetX)
      LD3DView.AnimateRotation(
         View, LDList.GetAt(SetX, i),
         1, 0, 0, 0, angle, duration, Repeat
      )
   Next
   
   For i = 1 To LDList.Count(SetY)
      LD3DView.AnimateRotation(
         View, LDList.GetAt(SetY, i),
         0, 1, 0, 0, angle, duration, Repeat
      )
   Next
   
   For i = 1 To LDList.Count(SetZ)
      LD3DView.AnimateRotation(
         View, LDList.GetAt(SetZ, i),
         0, 0, 1, 0, angle, duration, Repeat)
   Next
   
   Program.Delay(1010 * duration)
   LDGraphicsWindow.PauseUpdates()
   lastCol = BitCol
   
   For i = 1 To NumBit
      If BitCol[i] <> "" And (
            BitX[i] = xVal Or
            BitY[i] = yVal Or
            BitZ[i] = zVal) Then
         pos1 = BitPos[i]
         For j = 1 To NumBit
            If BitCol[j] <> "" And (
                  BitX[j] = xVal Or
                  BitY[j] = yVal Or
                  BitZ[j] = zVal) Then
               pos2 = LD3DView.GetPosition(View, Bit[j])
               distSquared = Math.Power(pos1[1] - pos2[1], 2)
                  + Math.Power(pos1[2] - pos2[2], 2)
                  + Math.Power(pos1[3] - pos2[3], 2)
               
               If distSquared < 0.1 Then ' bit j is now where i started
                  BitCol[i] = lastCol[j]
                  LD3DView.ResetMaterial(View, Bit[i], BitCol[i], "D")
                  LD3DView.AddImage(
                     View, Bit[i], "0:0 1:0 0:1 1:1", Image, "D")
               EndIf
            EndIf
         Next
      EndIf
   Next
   
   For i = 1 To NumBit
      LD3DView.RotateGeometry2(View, Bit[i], 1, 0, 0, 0)
   Next
   
   Program.Delay(10)
   LDGraphicsWindow.ResumeUpdates()
EndSub

