Math.UseRadianAngles = False

' ------------------------------------------------
Sub ChkRad_OnCheck()
   Math.UseRadianAngles = ChkRad.Checked
EndSub

' ------------------------------------------------
Sub LblColor1_OnClick()
   LblColor1.ChooseBackColor()
EndSub


' ------------------------------------------------
Sub LblColor2_OnClick()
   LblColor2.ChooseBackColor()
EndSub

H = 0
W = 0

' ------------------------------------------------
Sub BtnDraw_OnClick()
   If Me.Validate() = False Then
      Return
   EndIf
   
   GW.Top = 0
   GW.Left = 0
   GW.Width = 1000
   GW.Height = 700
   
   
   GW.Clear()
   W = GW.Width
   H = GW.Height
   
   GW.PenColor = Colors.Black
   GraphicsWindow.DrawLine(0, H / 2, W, H / 2)
   GraphicsWindow.DrawLine(W / 2, 0, W / 2, H)
   
   Draw(TxtFunc1.Text, LblColor1.BackColor)
   Draw(TxtFunc2.Text, LblColor2.BackColor)
EndSub

' ------------------------------------------------
Sub Draw(func, curveColor)
   If func = "" Then
      Return
   EndIf
   
   scale = TxtScale.Text
   Evaluator.Expression = func
   w2 = W / 2
   h2 = H / 2
   lastX = 0
   lastY = h2 - scale * Evaluator.Evaluate(-w2)
   GW.PenColor = curveColor
   GW.PenWidth = 1
   
   For x = -w2 To w2 Step 10
      newX = x + w2
      newY = h2 - scale * Evaluator.Evaluate(x)
      GraphicsWindow.DrawLine(
         lastX, lastY,
         newX, newY
      )
      lastX = newX
      lastY = newY
   Next
EndSub


' ------------------------------------------------
Sub TxtScale_OnLostFocus()
   If Text.IsNumeric(TxtScale.Text) Then
      TxtScale.Error = ""
   Else
      TxtScale.Error = "Scale must be a number!"
   EndIf
EndSub




